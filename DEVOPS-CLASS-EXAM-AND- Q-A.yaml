#1
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-pod-moti
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
          
---
     #2 
apiVersion: apps/v1
kind: Deployment
metadata:
    name: messaging
    labels:
    tier: msg
spec:
    replicas: 1
    selector:
    matchLabels:
        tier: msg
    template:
    metadata:
        labels:
        tier: msg
    spec:
        containers:
        - name: messaging
        image: redis:alpine
        ports:
---
    #3 kubectl create namespace apx-x998-moti
    #4 kubectl get nodes -o json >> ./tmp/nodes-moti
    #5 kubectl expose deployment messaging  --port=80 --protocol=TCP --target-port=6379 --name=messaging-service  --type=clusterIp
     
    #6
    apiVersion: v1
    kind: Service
    metadata:
      name: messaging-service
    spec:
      type: ClusterIp
      selector:
        tier: msg
      ports:
        - protocol: TCP
          port: 80
          targetPort: 6379 
---
    #7
    apiVersion: apps/v1
    kind: Deployment
    metadata:
        name: hr-web-app
        labels:
        app: hr-web-app
    spec:
        replicas: 2
        selector:
        matchLabels:
            app: hr-web-app
        template:
        metadata:
            labels:
            app: hr-web-app
        spec:
            containers:
            - name: hr-web-app
              image: kodekloud/webapp-color
---
#8 
apiVersion: v1
kind: Pod
metadata:
  name: static-busybox
  labels:
spec:
  containers:
    - name: static-busybox
      image: busybox
      command: ['sh', '-c', ' sleep 1000']   
---
  #9
  
apiVersion: v1
kind: Pod
metadata:
  name: temp-bus
  namespace: finance-moti
  labels:
    name: temp-bus
spec:
  containers:
  - name: temp-bus
    image: redis:alpine
 
---
  #10
  
  apiVersion: v1
  kind: PersistentVolume
  metadata:
    name: pv-analystics
    labels:
      type: local
  spec:
    storageClassName: manual
    capacity:
      storage: 10Gi
    accessModes:
      - ReadWriteMany
    hostPath:
      path: "/pv/data-analystics"
---
  #11
apiVersion: v1
kind: Pod
metadata:
  name: redis-storage-moti
spec:
  containers:
  - image: redis:alpine
    name: redis-storage-moti
    volumeMounts:
    - mountPath: /data/redis
      name: redis-storage-moti
  volumes:
  - name: redis-storage-moti
    emptyDir: {}
---
#12

#create PV
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-1
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "mnt/data"

 #creat PVC   

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pv-1-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

 #attached PVC to POD
---      
apiVersion: v1
kind: Pod
metadata:
  spec:
    volumes:
      - name: pv-1-claim
        persistentVolumeClaim:
          claimName: pv-1-claim
  creationTimestamp: null
  labels:
    run: use-pv
  name: use-pvspec-moti
  containers:
  - image: nginx
    name: use-pv
    volumeMounts:
      - mountPath: "/data"
        name: task-pv-storage
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}

---
# 13
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deploy
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.16
        ports:
# update the image version and record (for rollout)          
# kubectl set image deployment nginx-deploy nginx=nginx:1.17 --record
  
---
  #14
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: nginx-resolver
    labels:
      app: nginx
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: nginx
    template:
      metadata:
        name: nginx-resolver  
        labels:
          app: nginx
      spec:
        containers:
        - name: nginx
          image: nginx
          ports:
---
  apiVersion: v1
  kind: Service
  metadata:
    name: nginx-resolver-service
  spec:
    type: ClusterIp
    selector:
      app: nginx
# use the busybox for dns lookup and record to file
# kubectl run -it --rm --restart=Never busybox --image=busybox:1.28 -- nslookup   nginx-resolver-service >> /root/nginx-yourname.svc        

#15
  
---
apiVersion: v1
kind: Pod
metadata:
  name: nginx-critical
spec:
  containers:
  - name: nginx
    image: nginx
  nodeName: ip-172-31-43-119.eu-west-1.compute.internal 

---

#16

apiVersion: v1
kind: Pod
metadata:
  name: multi-pod
  labels:
    app: multi-pod
spec:
  containers:
  - name: alpha
    image: nginx
    env:
    - name: name
      value: "alpha"
  - name: beta
    image: busybox
    command: ['sh','c','sleep 4800']
    env:    
    - name: name
      value: "beta"

                



      #16.2
--- 
  apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: null
    labels:
      run: nginx
    name: nginx
  spec:
    containers:
    - image: nginx
      name: nginx
      resources: {}
    dnsPolicy: ClusterFirst
    restartPolicy: Never
    nodeSelector:
      kubernetes.io/arch: amd64
  status: {}       

---
  #scale deployments

  #kubectl scale deployment --replicas=3 webapp
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    creationTimestamp: null
    labels:
      app: webapp
    name: webapp
  spec:
    replicas: 5
    selector:
      matchLabels:
        app: webapp
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webapp
      spec:
        containers:
        - image: nginx
          name: nginx
          resources: {}
  status: {}



  #kubectl apply -f  webapp.yaml  --record  |  recording
  #kubectl rollout undo  deployment webapp --to-revision=2  |rollout to rev 2
  #kubectl rollout history deployment webapp | history of revisions
  # kubectl autoscale deployment webapp --cpu-percent=85 --min=10 --max=20k